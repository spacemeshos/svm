name: SVM CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: False
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        profile: ["release"]
    steps:
      - name: Automake (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          set -e
          brew update
          brew install automake
      - name: Cache LLVM (Windows)
        if: matrix.os == 'windows-latest'
        id: cache-llvm-windows
        uses: actions/cache@v2
        with:
          path: |
            C:\\Temp\\chocolatey\llvm
            C:\\Program Files\\LLVM\bin
          key: llvm-windows
      - name: Install LLVM (Windows)
        if: matrix.os == 'windows-latest' && steps.cache-llvm-windows.outputs.cache-hit != 'true'
        run: |
          choco config set cacheLocation C:\\Temp\\chocolatey
          choco install llvm -y
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Cache Cargo Registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: build-${{ runner.os }}-${{ matrix.profile }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            build-${{ runner.os }}-${{ matrix.profile }}-cargo-registry-
      - name: Cache Cargo Index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: build-${{ runner.os }}-${{ matrix.profile }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            build-${{ runner.os }}-${{ matrix.profile }}-cargo-index-
      - name: Cache Cargo Build
        uses: actions/cache@v2
        with:
          path: target/${{ matrix.profile }}
          key: build-${{ runner.os }}-${{ matrix.profile }}-nightly-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            build-${{ runner.os }}-${{ matrix.profile }}-nightly-target-
      - name: Install Rust
        run: rustup update nightly
      - name: Cargo Build
        uses: actions-rs/cargo@v1
        with:
          toolchain: nightly
          command: build
          args: --${{ matrix.profile }} --package svm-runtime-ffi --features=default-cranelift,default-memory --no-default-features
      - name: Cargo Build CLI
        uses: actions-rs/cargo@v1
        working-directory: crates/cli
        with:
          toolchain: nightly
          command: build
          args: --${{ matrix.profile }}
      - name: Prepare Artifact (General)
        run: |
          set -e
          mkdir bins
          mv target/${{ matrix.profile }}/svm.h bins/svm.h
      - name: Prepare Artifact (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          set -e
          mv target/${{ matrix.profile }}/libsvm_runtime_ffi.so bins/libsvm.so
          mv target/${{ matrix.profile }}/svm-cli bins/svm-cli
      - name: Prepare Artifact (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          set -e
          mv target/${{ matrix.profile }}/libsvm_runtime_ffi.dylib bins/libsvm.dylib
          mv target/${{ matrix.profile }}/svm-cli bins/svm-cli
      - name: Prepare Artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          set -e
          mv target/${{ matrix.profile }}/svm_runtime_ffi.dll bins/svm.dll
          mv target/${{ matrix.profile }}/svm-cli bins/svm-cli
      - name: Upload Artifacts
        uses: actions/upload-artifact@master
        with:
          name: bins-${{ runner.os }}-${{ matrix.profile }}
          path: bins/
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: False
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Cache Cargo Registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: test-${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            test-${{ runner.os }}-cargo-registry-
      - name: Cache Cargo Index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: test-${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            test-${{ runner.os }}-cargo-index-
      - name: Cache Cargo Test
        uses: actions/cache@v2
        with:
          path: target/tests
          key: test-${{ runner.os }}-${{ matrix.profile }}-nightly-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            test-${{ runner.os }}-${{ matrix.profile }}-nightly-target-
      - name: Install Rust
        run: rustup update nightly
      - name: Cargo Test
        uses: actions-rs/cargo@v1
        with:
          toolchain: nightly
          command: test
          args: --all --features=default-cranelift,default-memory --no-default-features -- --nocapture
          components: rustdoc
      - name: Run `cargo doc`
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --all
  wasm_codec:
    runs-on: macos-latest
    strategy:
      fail-fast: False
      matrix:
        profile: ["release"]
    defaults:
      run:
        shell: bash
    steps:
      - name: Setup node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Cache Cargo Registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: codec-${{ runner.os }}-${{ matrix.profile }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            codec-${{ runner.os }}-${{ matrix.profile }}-cargo-registry-
      - name: Cache Cargo Index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: codec-${{ runner.os }}-${{ matrix.profile }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            codec-${{ runner.os }}-${{ matrix.profile }}-cargo-index-
      - name: Cache Cargo wasm32
        uses: actions/cache@v2
        with:
          path: target/wasm32-unknown-unknown
          key: codec-${{ runner.os }}-${{ matrix.profile }}-nightly-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            codec-${{ runner.os }}-${{ matrix.profile }}-nightly-target-
      - name: Install Rust
        run: |
          rustup update nightly
          rustup target add wasm32-unknown-unknown --toolchain nightly
      - name: Test svm-codec
        working-directory: crates/codec/examples
        run: |
          set -e
          ./run.sh
      - name: Upload `svm_codec.wasm`
        uses: actions/upload-artifact@master
        with:
          name: svm_codec.wasm
          path: target/wasm32-unknown-unknown/release/svm_codec.wasm
  lints:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: False
      matrix:
        profile: [release]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
      - name: Run `cargo fmt`
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
